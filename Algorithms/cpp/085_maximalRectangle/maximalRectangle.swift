
class Solution {
    func maximalRectangle(_ matrix: [[Character]]) -> Int {
        if matrix.count == 0 {
            return 0
        }
        var map: [String: (Int, Int, Int)] = [:] // key: startRow,startColum,endRow,endColum, val: (maxArea, endRow, endColum)
        var max = 0
        let rowCount = matrix.count
        let columnCount = matrix[0].count
        for i in 0..<rowCount {
            for j in 0..<columnCount {
                let sub = helper(matrix, i, j, rowCount-1, columnCount-1, &map)
                let area = sub.0
                // let area = helper(matrix, i, j, rowCount-1, columnCount-1).0
                if area > max {
                    max = area
                    print("new max, (\(i),\(j),\(rowCount-1),\(columnCount-1)) -> (\(sub.0),\(sub.1),\(sub.2))")
                }
            }
        }
        return max
    }

    func helper(_ matrix: [[Character]], _ startRow: Int, _ startColumn: Int, _ maxEndRow: Int, _ maxEndColumn: Int, _ map: inout [String: (Int, Int, Int)]) -> (area: Int, endRow: Int, endColumn: Int) {
        let kCharZero = Character("0")
        if matrix[startRow][startColumn] == kCharZero {
            return (0, startRow, startColumn);
        }
        let k = String(startRow)+","+String(startColumn)+","+String(maxEndRow)+","+String(maxEndColumn)
        if map.keys.contains(k) {
            // print("use map")
            return map[k]!
        }

        let kCharOne = Character("1")
        var endRow = startRow
        var endColumn = startColumn
        while (endRow+1 <= maxEndRow && matrix[endRow+1][startColumn]==kCharOne) {
            endRow += 1
        }
        while (endColumn+1 <= maxEndColumn && matrix[startRow][endColumn+1]==kCharOne) {
            endColumn += 1
        }

        var area = 0
        var resultRow = -1
        var resultColum = -1
        if (endRow > startRow && endColumn > startColumn) {
            for r in (startRow+1...endRow).reversed() {
                for c in (startColumn+1...endColumn).reversed() {
                    if area > (r-startRow+1)*(c-startColumn+1) {
                        break
                    }
                    let sub = helper(matrix, startRow+1, startColumn+1, r, c,&map)
                    if sub.0 > 0 {
                        area = max(area, sub.0+sub.1-startRow+sub.2-startColumn+1)
                        resultRow = sub.1
                        resultColum = sub.2
                    }

                }
            }
        }
        let rowArea = endRow - startRow + 1
        if rowArea > area {
            area = rowArea
            resultRow = endRow
            resultColum = startColumn
        }
        let columnArea = endColumn-startColumn+1
        if columnArea > area {
            area = columnArea
            resultRow = startRow
            resultColum = endColumn
        }

        map[k] = (area, resultRow, resultColum)
        return (area, resultRow, resultColum)
    }
}

class Solution2 {
    func maximalRectangle(_ matrix: [[Character]]) -> Int {
        if matrix.count == 0 {
            return 0
        }
        var maxWidthMatrix: [[Int]] = []
        // let kZero = Character("0")
        let kOne = Character("1")
        for list in matrix {
            var tmpRow: [Int] = []
            for (index,c) in list.enumerated() {
                if c == kOne {
                    if index > 0 {
                        tmpRow.append(1+tmpRow[index-1])
                    } else {
                        tmpRow.append(1)
                    }
                } else {
                    tmpRow.append(0)
                }
            }
            maxWidthMatrix.append(tmpRow)
        }
        var area = 0
        for (i, list) in maxWidthMatrix.enumerated() {
            for (j, width) in list.enumerated() {
                var min = width
                for k in (0...i).reversed() {
                    let cWidth = maxWidthMatrix[k][j] 
                    if cWidth < min {
                        min = cWidth
                    } 
                    if min == 0 {
                        break
                    }
                    area = max(area, min*(i-k+1))
                }
            }
        }
        return area
    }
}

// let origin = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
// let origin = [["1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","0"],["1","1","1","1","1","0","0","0"],["0","1","1","1","1","0","0","0"]]
// [     0   1   2   3   4   5   6   7
//     ["1","1","1","1","1","1","1","1"], 0
//     ["1","1","1","1","1","1","1","0"], 1
//     ["1","1","1","1","1","1","1","0"], 2
//     ["1","1","1","1","1","0","0","0"], 3
//     ["0","1","1","1","1","0","0","0"]] 4
let origin = [["1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","0","0","1","1","1","1","1","1","1","1","0","0","1","1","1","0","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","0","1","0","1","1","1","1","1","1","0","1","1","0","1","1","0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","0","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","0","1","1","0","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","1","0","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","0","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","0","1","1","1","1","1","1","0","1","1","1","1"],["0","1","1","0","1","1","0","1","0","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","0","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","0","0","1","1","0","0","1","1","0","1","1","0","1","0","1","0","1"],["1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","0","1","1","1","1","0","1","0","1","1","0","1","0","1","1"],["1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1","1"],["1","1","1","0","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1","1","1","0","0","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","1","1","0","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","1","1"],["1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","0","1","0","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","0","1","1","1","1","1","1","0","0","1","1","1","1","1"],["1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","1","1"],["1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","0","1","1","1","1","1","0","0","1","0","1","1","1","1","1","0","1","1","1","1","1","1"],["1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","0","1","1","1","1","1","0","1","1","1","1","1","0","1","1","0","1","1"],["1","1","0","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","0","1","0","1","1","1","0","0","1","1","1","1","1","1","1","1"],["1","1","1","0","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","0","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","0","1","1","1","0","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","0","1","1","1","1","1","1","1","1","1","0","1","1","1","0","1"],["1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","0","1","1","1","0","1","1","0","1","1"],["1","1","1","1","0","1","1","0","1","1","1","1","1","1","0","1","1","0","1","1","0","1","1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","0","0","0","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","0","1","0","1","0","1","1","0","1","1","1","1","1","1","1","1"],["1","0","1","1","0","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1"],["1","0","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1"],["0","1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1","0","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","0","1","1","1","1","0","1","1","1","1","1","1","0","1","0","1","1","0","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","1","1","1","0"],["1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0","0","1","1","1","1"],["1","1","0","1","1","0","1","1","1","1","1","1","0","1","0","1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","0","1","1","1","0","1","0","1","0","0"],["0","1","1","0","1","1","1","1","1","1","1","0","0","1","1","1","1","1","0","0","1","0","1","1","1","1","1","0","1","1","1","0","1","1","0","1","1","1","0","1"]]
var matrix: [[Character]] = []
for list in origin {
    var cList: [Character] = []
    for s in list {
        cList.append(Character(s))
    }
    matrix.append(cList)
}
print("start")

let area = Solution().maximalRectangle(matrix)
print("area = \(area)")


let area2 = Solution2().maximalRectangle(matrix)
print("area2 = \(area2)")